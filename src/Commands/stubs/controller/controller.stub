declare(strict_types=1);

namespace app\modules\admin\controller;

{if $grouping}
use app\bundles\{$groupName}\entity\{$className}Entity;
use app\bundles\{$groupName}\service\{$className}BundleService;
{else}
use app\entity\{$className}Entity;
use app\service\{$className}BundleService;
{/if}
use app\modules\admin\request\{$camelName}\{$className}CreateRequest;
use app\modules\admin\request\{$camelName}\{$className}QueryRequest;
use app\modules\admin\request\{$camelName}\{$className}UpdateRequest;
use app\modules\admin\response\{$camelName}\{$className}QueryResponse;
use app\modules\admin\response\{$camelName}\{$className}Response;
use Juling\Foundation\Exception\CustomException;
use OpenApi\Attributes as OA;
use think\facade\Db as DB;
use think\facade\Log;
use think\Response;
use Throwable;

class {$className}Controller extends BaseController
{
    #[OA\Post(path: '/{$camelName}/query', summary: '查询列表接口', security: [['bearerAuth' => []]], tags: ['{$comment}'])]
    #[OA\Parameter(name: 'page', description: '当前页码', in: 'query', required: true, example: 1)]
    #[OA\Parameter(name: 'pageSize', description: '每页分页数', in: 'query', required: false, example: 10)]
    #[OA\RequestBody(required: true, content: new OA\JsonContent(ref: {$className}QueryRequest::class))]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {$className}QueryResponse::class))]
    public function query(): Response
    {
        try {
            $request = $this->request->get();
            $page = intval($this->request->param('page', 1));
            $pageSize = intval($this->request->param('pageSize', 10));

            $v = new {$className}QueryRequest();
            if (! $v->check($request)) {
                throw new CustomException($v->getError());
            }

            $condition = [
                //
            ];

            ${$camelName}BundleService = new {$className}BundleService();
            $result = ${$camelName}BundleService->page($condition, $page, $pageSize);

            foreach ($result['data'] as $key => $item) {
                $response = new {$className}Response();
                $response->loadData($item);
                $result['data'][$key] = $response->toArray();
            }

            return $this->success($result);
        } catch (Throwable $e) {
            if ($e instanceof CustomException) {
                return $this->error($e->getMessage());
            }

            Log::error($e);

            return $this->error('查询列表错误');
        }
    }

    #[OA\Post(path: '/{$camelName}/create', summary: '新增接口', security: [['bearerAuth' => []]], tags: ['{$comment}'])]
    #[OA\RequestBody(required: true, content: new OA\JsonContent(ref: {$className}CreateRequest::class))]
    #[OA\Response(response: 200, description: 'OK')]
    public function create(): Response
    {
        DB::startTrans();
        try {
            $request = $this->request->get();

            $v = new {$className}CreateRequest();
            if (! $v->check($request)) {
                throw new CustomException($v->getError());
            }

            ${$camelName}Entity = new {$className}Entity();
            ${$camelName}Entity->loadData($request);

            ${$camelName}BundleService = new {$className}BundleService();
            $insertId = ${$camelName}BundleService->save(${$camelName}Entity->toArray());
            if ($insertId > 0) {
                DB::commit();

                return $this->success('新增数据成功');
            }

            throw new CustomException('新增数据失败');
        } catch (Throwable $e) {
            DB::rollback();

            if ($e instanceof CustomException) {
                return $this->error($e->getMessage());
            }

            Log::error($e);

            return $this->error('新增数据错误');
        }
    }

    #[OA\Get(path: '/{$camelName}/show', summary: '获取详情接口', security: [['bearerAuth' => []]], tags: ['{$comment}'])]
    #[OA\Parameter(name: 'id', description: 'ID', in: 'query', required: true, example: 1)]
    #[OA\Response(response: 200, description: 'OK', content: new OA\JsonContent(ref: {$className}Response::class))]
    public function show(): Response
    {
        try {
            $id = intval($this->request->param('id', 0));

            $condition = [
                ['id', '=', $id],
            ];

            ${$camelName}BundleService = new {$className}BundleService();
            ${$camelName} = ${$camelName}BundleService->getOne($condition);

            if (empty(${$camelName})) {
                throw new CustomException('数据不存在或状态异常');
            }

            $response = new {$className}Response();
            $response->loadData(${$camelName});

            return $this->success($response->toArray());
        } catch (Throwable $e) {
            if ($e instanceof CustomException) {
                return $this->error($e->getMessage());
            }

            Log::error($e);

            return $this->error('获取详情错误');
        }
    }

    #[OA\Put(path: '/{$camelName}/update', summary: '更新接口', security: [['bearerAuth' => []]], tags: ['{$comment}'])]
    #[OA\RequestBody(required: true, content: new OA\JsonContent(ref: {$className}UpdateRequest::class))]
    #[OA\Response(response: 200, description: 'OK')]
    public function update(): Response
    {
        DB::startTrans();
        try {
            $request = $this->request->get();

            $v = new {$className}UpdateRequest();
            if (! $v->check($request)) {
                throw new CustomException($v->getError());
            }

            ${$camelName}BundleService = new {$className}BundleService();
            ${$camelName} = ${$camelName}BundleService->getById($request['id']);
            if (empty(${$camelName})) {
                throw new CustomException('数据不存在或状态异常');
            }

            ${$camelName}Entity = new {$className}Entity();
            ${$camelName}Entity->loadData($request);

            ${$camelName}BundleService->update(${$camelName}Entity->toArray(), [
                ['id', '=', $request['id']],
            ]);

            DB::commit();

            return $this->success('更新数据成功');
        } catch (Throwable $e) {
            DB::rollback();

            if ($e instanceof CustomException) {
                return $this->error($e->getMessage());
            }

            Log::error($e);

            return $this->error('更新数据错误');
        }
    }

    #[OA\Delete(path: '/{$camelName}/destroy', summary: '删除接口', security: [['bearerAuth' => []]], tags: ['{$comment}'])]
    #[OA\Parameter(name: 'id', description: 'ID', in: 'query', required: true, example: 1)]
    #[OA\Response(response: 200, description: 'OK')]
    public function destroy(): Response
    {
        DB::startTrans();
        try {
            $id = intval($this->request->param('id', 0));

            $condition = [
                ['id', '=', $id],
            ];

            ${$camelName}BundleService = new {$className}BundleService();
            if (${$camelName}BundleService->remove($condition)) {
                DB::commit();

                return $this->success('删除数据成功');
            }

            throw new CustomException('删除数据失败');
        } catch (Throwable $e) {
            DB::rollback();

            if ($e instanceof CustomException) {
                return $this->error($e->getMessage());
            }

            Log::error($e);

            return $this->error('删除数据错误');
        }
    }
}
