declare(strict_types=1);

{if $grouping}
namespace app\bundles\{$groupName}\repository;
{else}
namespace app\repository;
{/if}

{if $grouping}

use app\bundles\{$groupName}\entity\{$className}Entity;
{else}

use app\entity\{$className}Entity;
{/if}
use Exception;
use Juling\Foundation\Contract\RepositoryInterface;
use Juling\Foundation\Repository\CurdRepository;
use think\Model;

class {$className}Repository extends CurdRepository implements RepositoryInterface
{
    private static ?{$className}Repository $instance = null;

    /**
     * 单例
     */
    public static function getInstance(): {$className}Repository
    {
        if (is_null(self::$instance)) {
            self::$instance = new {$className}Repository();
        }

        return self::$instance;
    }

    /**
     * 添加
     */
    public function createByEntity({$className}Entity $entity): {$primaryKeyType}
    {
        return $this->create($entity->toArray());
    }

    /**
     * 按照ID查询返回对象
     */
    public function findOneEntityById({$primaryKeyType} $id): ?{$className}Entity
    {
        $data = $this->findOneById($id);
        if (empty($data)) {
            return null;
        }

        $entity = new {$className}Entity();
        $entity->loadData($data);

        return $entity;
    }

    /**
     * 按照条件查询
     */
    public function findOneEntity(array $condition): ?{$className}Entity
    {
        $data = $this->findOneByWhere($condition);
        if (empty($data)) {
            return null;
        }

        $entity = new {$className}Entity();
        $entity->loadData($data);

        return $entity;
    }

    /**
     * 查询列表
     *
     * @throws Exception
     */
    public function findAllEntity(array $condition = []): array
    {
        $result = $this->findAll($condition);
        if (empty($result)) {
            return [];
        }

        foreach ($result as $key => $item) {
            $entity = new {$className}Entity();
            $entity->loadData($item);
            $result[$key] = $entity;
        }

        return $result;
    }

    /**
     * 分页查询
     *
     * @throws Exception
     */
    public function paginateEntity(array $condition, int $page, int $pageSize): array
    {
        $result = $this->paginate($condition, $page, $pageSize);

        foreach ($result['data'] as $key => $item) {
            $entity = new {$className}Entity();
            $entity->loadData($item);
            $result['data'][$key] = $entity;
        }

        return $result;
    }

    /**
     * 定义数据数据模型类
     */
    public function model(string $modelName = '{$className}'): Model
    {
{if $grouping}
        $model = '\\app\\bundles\\{$groupName}\\model\\'.$modelName.'Model';

{else}
        $model = '\\app\\model\\'.$modelName.'Model';

{/if}
        return new $model();
    }
}
