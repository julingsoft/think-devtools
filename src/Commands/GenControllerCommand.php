<?php

declare(strict_types=1);

namespace Juling\DevTools\Commands;

use Juling\DevTools\Support\SchemaTrait;
use Juling\Foundation\Support\Str;
use think\console\Command;
use think\console\Input;
use think\console\input\Argument;
use think\console\Output;
use think\facade\View;

class GenControllerCommand extends Command
{
    use SchemaTrait;

    private array $ignoreTables = ['migrations'];

    private bool $grouping = false;

    private string $outDir;

    protected function configure(): void
    {
        $this->setName('gen:controller')
            ->addArgument('grouping', Argument::OPTIONAL, 'generated by group', true)
            ->setDescription('Generate controller class');
    }

    protected function execute(Input $input, Output $output): int
    {
        $this->grouping = boolval($input->getArgument('grouping'));

        $this->outDir = app_path().'modules/admin/';
        $this->ensureDirectoryExists([
            $this->outDir.'controller',
            $this->outDir.'request',
            $this->outDir.'response',
        ]);

        $tables = $this->getTables();
        foreach ($tables as $row) {
            $tableName = implode('', $row);
            if (in_array($tableName, $this->ignoreTables)) {
                continue;
            }

            $className = parse_name($tableName, 1);
            $comment = $this->getTableComment($tableName);
            if (Str::endsWith($comment, '表')) {
                $comment = Str::substr($comment, 0, -1);
            }
            $comment .= '模块';
            $columns = $this->getTableInfo($tableName);

            $this->controllerTpl($className, $comment, $tableName);
            $this->requestTpl($className, $columns);
            $this->responseTpl($className, $columns);
        }

        return 1;
    }

    private function controllerTpl(string $className, string $comment, string $tableName): void
    {
        $groupName = $this->getTableGroupName($tableName);

        $data = [
            'grouping' => $this->grouping,
            'groupName' => $groupName,
            'className' => $className,
            'camelName' => Str::camel($className),
            'comment' => $comment,
        ];
        $tpl = file_get_contents(__DIR__.'/stubs/controller/controller.stub');
        $content = View::display($tpl, $data);
        file_put_contents($this->outDir.'controller/'.$className.'Controller.php', '<?php'."\n\n".$content);
    }

    private function requestTpl(string $name, array $columns): void
    {
        $dist = $this->outDir.'request/'.Str::camel($name);
        if (! is_dir($dist)) {
            $this->ensureDirectoryExists($dist);
        }

        $ignoreFields = [
            'create_time',
            'update_time',
            'delete_time',
        ];

        $dataSets = ['required' => '', 'properties' => '', 'rule' => '', 'message' => ''];
        foreach ($columns as $column) {
            if (in_array($column['Field'], $ignoreFields)) {
                continue;
            }
            if ($column['Field'] === 'default') {
                $column['Field'] = 'isDefault';
            }
            if ($column['Field'] === 'id' && empty($column['Comment'])) {
                $column['Comment'] = 'ID';
            }
            $dataSets['required'] .= "        '".$column['Field']."',\n";
            $dataSets['properties'] .= "        new OA\Property(property: '{$column['Field']}', description: '{$column['Comment']}', type: '{$column['SwaggerType']}'),\n";
            $dataSets['rule'] .= "        '{$column['Field']}' => 'require',\n";
            $dataSets['message'] .= "        '{$column['Field']}.require' => '请设置{$column['Comment']}',\n";
        }

        $dataSets = array_map(function ($item) {
            return rtrim($item, "\n");
        }, $dataSets);

        $content = file_get_contents(__DIR__.'/stubs/controller/request/create.stub');
        $content = str_replace([
            '{$camelName}',
            '{$name}',
            '{$dataSets[required]}',
            '{$dataSets[properties]}',
            '{$dataSets[rule]}',
            '{$dataSets[message]}',
        ], [
            Str::camel($name),
            $name,
            $dataSets['required'],
            $dataSets['properties'],
            $dataSets['rule'],
            $dataSets['message'],
        ], $content);
        file_put_contents($this->outDir.'request/'.Str::camel($name).'/'.$name.'CreateRequest.php', $content);

        $content = file_get_contents(__DIR__.'/stubs/controller/request/query.stub');
        $content = str_replace([
            '{$camelName}',
            '{$name}',
            '{$dataSets[required]}',
            '{$dataSets[properties]}',
            '{$dataSets[rule]}',
            '{$dataSets[message]}',
        ], [
            Str::camel($name),
            $name,
            '',
            '',
            '',
            '',
        ], $content);
        file_put_contents($this->outDir.'request/'.Str::camel($name).'/'.$name.'QueryRequest.php', $content);

        $content = file_get_contents(__DIR__.'/stubs/controller/request/update.stub');
        $content = str_replace([
            '{$camelName}',
            '{$name}',
            '{$dataSets[required]}',
            '{$dataSets[properties]}',
            '{$dataSets[rule]}',
            '{$dataSets[message]}',
        ], [
            Str::camel($name),
            $name,
            $dataSets['required'],
            $dataSets['properties'],
            $dataSets['rule'],
            $dataSets['message'],
        ], $content);
        file_put_contents($this->outDir.'request/'.Str::camel($name).'/'.$name.'UpdateRequest.php', $content);
    }

    private function responseTpl(string $className, array $columns): void
    {
        // 1、创建查询响应类
        $dist = $this->outDir.'response/'.Str::camel($className);
        if (! is_dir($dist)) {
            $this->ensureDirectoryExists($dist);
        }

        $content = file_get_contents(__DIR__.'/stubs/controller/response/query.stub');
        $content = str_replace([
            '{$camelName}',
            '{$name}',
        ], [
            Str::camel($className),
            $className,
        ], $content);
        file_put_contents($this->outDir.'response/'.Str::camel($className).'/'.$className.'QueryResponse.php', $content);

        // 2、创建响应类
        $ignoreFields = ['delete_time', 'password', 'password_salt'];
        foreach ($columns as $key => $column) {
            if (in_array($column['Field'], $ignoreFields)) {
                continue;
            }
            if ($column['Field'] === 'default') {
                $column['Field'] = 'isDefault';
            }
            if ($column['Field'] === 'id' && empty($column['Comment'])) {
                $column['Comment'] = 'ID';
            }
            $columns[$key] = $column;
        }

        $data = [
            'className' => $className,
            'camelName' => Str::camel($className),
            'columns' => $columns,
        ];
        $tpl = file_get_contents(__DIR__.'/stubs/controller/response/response.stub');
        $content = View::display($tpl, $data);
        file_put_contents($this->outDir.'response/'.Str::camel($className).'/'.$className.'Response.php', '<?php'."\n\n".$content);
    }
}
