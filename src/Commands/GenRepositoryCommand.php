<?php

declare(strict_types=1);

namespace Juling\DevTools\Commands;

use Juling\DevTools\Support\SchemaTrait;
use think\console\Command;
use think\console\Input;
use think\console\input\Argument;
use think\console\Output;
use think\facade\View;

class GenRepositoryCommand extends Command
{
    use SchemaTrait;

    private array $ignoreTables = ['migrations'];

    private bool $grouping = false;

    protected function configure(): void
    {
        $this->setName('gen:dao')
            ->addArgument('grouping', Argument::OPTIONAL, 'generated by group', true)
            ->setDescription('Generate repository class');
    }

    protected function execute(Input $input, Output $output): int
    {
        $this->grouping = boolval($input->getArgument('grouping'));

        $tables = $this->getTables();
        foreach ($tables as $row) {
            $tableName = implode('', $row);
            if (in_array($tableName, $this->ignoreTables)) {
                continue;
            }
            $columns = $this->getTableInfo($tableName);
            $primaryKey = $this->getPrimaryKeyType($columns);
            $this->repositoryTpl($tableName, $primaryKey);
        }

        return 1;
    }

    private function repositoryTpl(string $tableName, array $primaryKey): void
    {
        $groupName = $this->getTableGroupName($tableName);
        $className = parse_name($tableName, 1);
        $primaryKeyType = empty($primaryKey) ? 'int' : $primaryKey['Type'];

        $data = [
            'grouping' => $this->grouping,
            'groupName' => $groupName,
            'className' => $className,
            'primaryKeyType' => $primaryKeyType,
        ];
        $tpl = file_get_contents(__DIR__.'/stubs/repository/repository.stub');
        $content = View::display($tpl, $data);

        $dist = $this->grouping ? app_path('bundles/'.$groupName.'/repository') : app_path('repository');
        $this->ensureDirectoryExists($dist);
        file_put_contents($dist.'/'.$className.'Repository.php', '<?php'."\n\n".$content);
    }
}
