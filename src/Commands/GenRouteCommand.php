<?php

declare(strict_types=1);

namespace Juling\DevTools\Commands;

use ReflectionClass;
use ReflectionException;
use ReflectionMethod;
use think\console\Command;
use think\console\Input;
use think\console\Output;
use think\helper\Arr;
use think\helper\Str;

class GenRouteCommand extends Command
{
    protected function configure(): void
    {
        // 指令配置
        $this->setName('gen:route')
            ->setDescription('the gen route command');
    }

    protected function execute(Input $input, Output $output): void
    {
        $modules = array_merge(
            glob(app_path() . 'api/*', GLOB_ONLYDIR),
            glob(app_path() . 'modules/*', GLOB_ONLYDIR)
        );

        foreach ($modules as $modulePath) {
            $this->genModuleRoute($modulePath);
        }

        $output->writeln('ok');
    }

    private function genModuleRoute(string $modulePath): void
    {
        $files = glob($modulePath . '/controller/*.php');
        if (!empty($files)) {
            $routes = $this->getRoutes($files);

            if (!empty($routes)) {
                $moduleName = basename($modulePath);
                $this->genRoutes($moduleName, $routes, $modulePath . '/route.php');
            }
        }
    }

    /**
     * @throws ReflectionException
     */
    private function getRoutes(array $files): array
    {
        $routes = [];

        $ignoreControllers = config('devtools.ignore_controllers');
        if (is_null($ignoreControllers)) {
            $ignoreControllers = [];
        }

        foreach ($files as $file) {
            $file = str_replace('/', '\\', $file);
            preg_match('/(app\\\\.+?\\\\(\w+)Controller)\.php/', $file, $matches);
            if (! in_array(Str::studly($matches[2]), $ignoreControllers)) {
                $class = $matches[1];
                $classRoutes = $this->reflectionRoutes($class);
                $routes = array_merge($routes, $classRoutes);
            }
        }

        return $routes;
    }

    private function genRoutes(string $moduleName, array $routes, string $routeFile): void
    {
        $routeContent = "Route::group('$moduleName', function() {\n";
        foreach ($routes as $route) {
            $routeContent .= sprintf("    Route::%s('%s', '%s@%s');\n", $route['httpMethod'], $route['path'], $route['controller'], $route['action']);
        }
        $routeContent .= "})->namespace('".$routes[0]['namespace']."');";

        $content = $this->getTemplate($routeContent);
        file_put_contents($routeFile, $content);
    }

    /**
     * @throws ReflectionException
     */
    private function reflectionRoutes(string $class): array
    {
        $reflectionClass = new ReflectionClass($class);
        $methods = $reflectionClass->getMethods(ReflectionMethod::IS_PUBLIC);
        $methods = array_filter($methods, function ($item) use ($class) {
            return $item->class === $class;
        });

        $routes = [];
        foreach ($methods as $method) {
            $methodAttributes = $reflectionClass->getMethod($method->name)->getAttributes();
            if (isset($methodAttributes[0])) {
                $methodAttribute = $methodAttributes[0];

                $httpMethod = Str::lower(Arr::last(explode('\\', $methodAttribute->getName())));
                $path = $methodAttribute->getArguments()['path'];
                $summary = $methodAttribute->getArguments()['summary'];
                $routes[] = [
                    'httpMethod' => $httpMethod,
                    'path' => $path === '/' ? $path : ltrim($path, '/'),
                    'class' => $class,
                    'namespace' => $reflectionClass->getNamespaceName(),
                    'controller' => $reflectionClass->getShortName(),
                    'action' => $method->name,
                    'summary' => $summary,
                ];
            }
        }

        return $routes;
    }

    private function getTemplate($content): string
    {
        return <<<EOF
<?php

// ==========================================================================
// Code generated by gen:route CLI tool. DO NOT EDIT.
// ==========================================================================

declare(strict_types=1);

use think\\facade\\Route;

$content

EOF;
    }
}
